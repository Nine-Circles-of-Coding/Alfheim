apply plugin: 'forge'
apply plugin: 'kotlin'
apply plugin: 'idea'

def mainMod = false

project.logger.lifecycle("\nBuilding " + (mainMod ? "main" : "side") + " mod\n")

buildscript {
	ext.kotlinVersion = '1.7.0'
	
	repositories {
		mavenCentral()
		maven {
			url = "https://jcenter.bintray.com/"
		}
		maven {
			name = "forge"
			url = "https://maven.minecraftforge.net/"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
//		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
			changing = true
		}
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
	}
}

repositories {
	mavenCentral()
}

group = "main"
version = mainMod ? "BETA-39" : "12"
archivesBaseName = mainMod ? "Alfheim" : "Alfheim-Modular"
def modid = mainMod ? "alfheim" : "alfmod"
def desc = mainMod ? "Botania addon alowing you to travel to Alfheim" : "Alfheim time-limited events"
def cred = mainMod ? "see credits.txt in mod file" : ""
def logo = mainMod ? "alfheim_logo.png" : ""
def reqM = mainMod ? "\"Botania\"" : "\"Botania\",\"alfheim\""
def deps = mainMod ? "\"Botania\",\"MineTweaker3\",\"Thaumcraft\"" : "\"Botania\",\"alfheim\",\"Thaumcraft\""

minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = "minecraft"
}

configurations {
	embed
	compile.extendsFrom(embed)
}

dependencies {
	implementation fileTree(dir: 'lib', include: ['*.jar'])
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
}

compileJava {
	options.encoding = "UTF-8"
	sourceCompatibility = targetCompatibility = '1.8'
}

sourceCompatibility = targetCompatibility = '1.8'
compileKotlin.kotlinOptions.jvmTarget = "1.8"

jar {
	duplicatesStrategy = 'include'
	
	from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
	
	manifest {
		if (mainMod) {
			attributes 'FMLAT': 'alfheim_at.cfg'
			attributes 'FMLCorePlugin': 'alfheim.common.core.asm.AlfheimHookLoader'
		} else {
			attributes 'FMLAT': 'alfmod_at.cfg'
			attributes 'FMLCorePlugin': 'alfmod.common.core.asm.AlfheimModularHookLoader'
		}
		
		attributes 'FMLCorePluginContainsFMLMod': 'true'
	}
	
	// exclude("alexsocol/**")
	
	exclude ("META-INF/asjlib_at.cfg")
	
	if (mainMod) {
		exclude ("alfmod/**")
		exclude ("assets/alfmod/**")
		exclude ("META-INF/alfmod_at.cfg")
	} else {
		// exclude ("alfheim/**")
		
		exclude ("assets/alfheim/**")
		exclude ("assets/botania/**")
		exclude ("assets/etfuturum/**")
		exclude ("assets/minecraft/**")
		exclude ("assets/thaumcraft/**")
		exclude ("assets/tinker/**")
				
		exclude ("META-INF/alfheim_at.cfg")
		
		exclude ("alfheim_logo.png")
		exclude ("credits.txt")
	}
}

processResources {
	duplicatesStrategy = 'include'
	
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version':project.version, 'mcversion':project.minecraft.version, 'name':project.archivesBaseName, 'modid':modid, 'desc':desc, 'cred':cred, 'logo':logo, 'reqM':reqM, 'deps':deps
	}
		
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
	
	rename '(.+_at.cfg)', 'META-INF/$1'
}

idea {
	module {
		inheritOutputDirs = false
		outputDir = file('build/classes/main/')
	}
}

subprojects {
	apply plugin: 'idea'
}